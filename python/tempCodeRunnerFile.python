import tkinter as tk
import time
import winsound

class SpeechTimer:
    def __init__(self, master):
        self.master = master
        self.master.title("演讲限时器")
        self.master.geometry("300x200")

        self.count_max = tk.IntVar()
        self.count_max.set(5)  # 默认最大时间为 5 分钟
        self.alert_max = tk.IntVar()
        self.alert_max.set(30)  # 默认报警提示时间为 30 秒
        self.is_running = False
        self.is_paused = False
        self.start_time = None

        self.create_widgets()

    def create_widgets(self):
        # 数字输入框（设置最大时间）
        tk.Label(self.master, text="最大时间（分钟）：").grid(row=0, column=0, sticky=tk.W)
        tk.Spinbox(self.master, from_=1, to=60, textvariable=self.count_max, width=5).grid(row=0, column=1)

        # 数字输入框（设置报警提示时间）
        tk.Label(self.master, text="报警提示时间（秒）：").grid(row=1, column=0, sticky=tk.W)
        tk.Spinbox(self.master, from_=1, to=60, textvariable=self.alert_max, width=5).grid(row=1, column=1)

        # 显示倒计时
        self.timer_label = tk.Label(self.master, text="00:00")
        self.timer_label.grid(row=2, column=0, columnspan=2, pady=10)

        # 按钮（开始/暂停）
        self.start_button = tk.Button(self.master, text="开始", command=self.start_pause_timer)
        self.start_button.grid(row=3, column=0, padx=10)

        # 按钮（停止/重置）
        self.stop_button = tk.Button(self.master, text="停止", command=self.stop_reset_timer)
        self.stop_button.grid(row=3, column=1, padx=10)

    def start_pause_timer(self):
        if self.is_running:
            # 暂停计时器
            self.is_paused = True
            self.is_running = False
            self.start_button.configure(text="继续")
        elif self.is_paused:
            # 继续计时器
            self.is_paused = False
            self.is_running = True
            self.start_button.configure(text="暂停")
            self.start_time = time.time() - self.elapsed_time
        else:
            # 启动计时器
            self.is_running = True
            self.start_button.configure(text="暂停")
            self.start_time = time.time()

        self.update_timer()

    def stop_reset_timer(self):
        if self.is_running or self.is_paused:
            # 停止计时器
            self.is_running = False
            self.is_paused = False
            self.start_button.configure(text="开始")
            self.timer_label.configure(text="00:00")
            self.start_time = None

    def update_timer(self):
        if self.is_running:
            # 计算已经过去的时间
            elapsed_time = time.time() - self.start_time

            # 判断是否倒计时结束
            if elapsed_time >= self.count_max.get() * 60:
                self.is_running = False
                winsound.PlaySound("SystemExclamation", winsound.SND_ALIAS)
                self.start_button.configure(text="开始")
                self.timer_label.configure(text="00:00")
                self.start_time = None
                return

            # 更新倒计时显示
            remaining_time = int(self.count_max.get() * 60 - elapsed_time)
            remaining_minutes = remaining_time // 60
            remaining_seconds = remaining_time % 60
            self.timer_label.configure(text="{:02d}:{:02d}".format(remaining_minutes, remaining_seconds))

            # 判断是否需要报警提示
            if remaining_time <= self.alert_max.get():
                winsound.PlaySound("SystemExclamation", winsound.SND_ALIAS)

        self.master.after(1000, self.update_timer)

root = tk.Tk()
app = SpeechTimer(root)
root.mainloop()